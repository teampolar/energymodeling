component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Lumped
    %    Number of parallel assemblies: 4
    %    Number of cells per parallel assembly: 1
    %
    %    MATLAB version: 23.2
    %    Simscape Battery version: 23.2
    %    Simscape code generated on: 19-Nov-2023 13:59:08

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vecCell = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_matCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        Rleak_vecCell = {[8000, 7000, 6000],'Ohm'}; % Self-discharge resistance, Rleak(T)
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        storage_dt_age_vecCell = {[0],'d'}; % Vector of time intervals
        storage_T_age_vecCell = {[273],'K'}; % Vector of storage temperatures
        OCV_ageCell = {0.9,'1'}; % Normalized open-circuit voltage during storage, V/Vnom
        OCV_scaling_age_resistanceCell = {2.2134e6,'1'}; % Terminal resistance linear scaling for voltage, b
        OCV_offset_age_resistanceCell = {1.632e6,'1'}; % Terminal resistance constant offset for voltage, c
        temp_exp_age_resistanceCell = {0.515833569,'V'}; % Terminal resistance temperature-dependent exponential increase, d
        t_exp_age_resistanceCell = {0.75,'1'}; % Terminal resistance time exponent, a
        OCV_scaling_age_capacityCell = {1.5097e07,'1'}; % Capacity linear scaling for voltage, b
        OCV_offset_age_capacityCell = {8.3625e06,'1'}; % Capacity constant offset for voltage, c
        temp_exp_age_capacityCell = {0.6011,'V'}; % Capacity temperature-dependent exponential decrease, d
        t_exp_age_capacityCell = {0.75,'1'}; % Capacity time exponent, a
        thermal_massCell = {100,'J/K'}; % Thermal mass
    end

    parameters(ExternalAccess=none)
        P = 1; % Batteries in Parallel
        S = 4; % Batteries in Series
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCell = {0,'A'}; % Cell current (positive in)
        vCell = {0,'V'}; % Cell terminal voltage
        socCell = {value={1,'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={0,'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={298.15,'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={repmat(0,4,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,4,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    intermediates
        power_dissipated = Nomada105.power_dissipated*((S*P)-1); % Power dissipated by (S*P)-1 cells
    end

    equations
        assert(length(iCell) == 1);
        assert(length(vCell) == 1);
        assert(length(socCell) == 1);
        assert(length(numCyclesCell) == 1);
        assert(length(temperatureCell) == 1);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        vParallelAssembly(1) == Nomada105(1).p.v - Nomada105(1).n.v;
        socParallelAssembly(1) == Nomada105.stateOfCharge;
        Nomada105.i == iCell;
        Nomada105.v == vCell;
        Nomada105.stateOfCharge == socCell;
        Nomada105.num_cycles == numCyclesCell;
        Nomada105.cell_temperature == temperatureCell;
    end

    components(ExternalAccess=observe)
        Nomada105 = batteryecm.table_battery(SOC_vec = SOC_vecCell,...
            T_vec = T_vecCell,V0_mat = V0_matCell,V_range = V_rangeCell,R0_mat = R0_matCell,...
            AH = AHCell,Rleak_vec = Rleak_vecCell,...
            extrapolation_option = extrapolation_optionCell,storage_dt_age_vec = storage_dt_age_vecCell,...
            storage_T_age_vec = storage_T_age_vecCell,OCV_age = OCV_ageCell,...
            OCV_scaling_age_resistance = OCV_scaling_age_resistanceCell,...
            OCV_offset_age_resistance = OCV_offset_age_resistanceCell,...
            temp_exp_age_resistance = temp_exp_age_resistanceCell,t_exp_age_resistance = t_exp_age_resistanceCell,...
            OCV_scaling_age_capacity = OCV_scaling_age_capacityCell,...
            OCV_offset_age_capacity = OCV_offset_age_capacityCell,temp_exp_age_capacity = temp_exp_age_capacityCell,...
            t_exp_age_capacity = t_exp_age_capacityCell,thermal_mass = thermal_massCell,...
            T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,...
            prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
            prm_age_capacity = simscape.enum.tablebattery.prm_age.enabled,...
            prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
            prm_age_resistance = simscape.enum.tablebattery.prm_age.enabled,...
            prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
            prm_dyn = simscape.enum.tablebattery.prm_dyn.off,prm_fade = simscape.enum.tablebattery.prm_fade.disabled,...
            prm_leak = simscape.enum.tablebattery.prm_leak.enabled,...
            thermal_port = simscape.enum.thermaleffects.model,i.priority = priority.none,...
            v.priority = priority.none,stateOfCharge.priority = priority.none,...
            num_cycles.priority = priority.none,cell_temperature.priority = priority.none);
    end

    components(Access=private)
        PositiveAdapter = BatteriesLumpingAdapters.ElectricalLumpingAdapter(CellsInParallel = P,CellsInSeries = S);
        NegativeAdapter = BatteriesLumpingAdapters.ElectricalLumpingAdapter(CellsInParallel = P,CellsInSeries = S);
    end

    connections
        connect(n,NegativeAdapter.LumpedNode);
        connect(NegativeAdapter.CellNode,Nomada105.n);
        connect(p,PositiveAdapter.LumpedNode);
        connect(PositiveAdapter.CellNode,Nomada105.p);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,T_vecCell,V0_matCell,V_rangeCell,R0_matCell,AHCell,Rleak_vecCell,extrapolation_optionCell),...
            UIGroup("Calendar Aging",storage_dt_age_vecCell,storage_T_age_vecCell,OCV_ageCell,OCV_scaling_age_resistanceCell,OCV_offset_age_resistanceCell,temp_exp_age_resistanceCell,t_exp_age_resistanceCell,OCV_scaling_age_capacityCell,OCV_offset_age_capacityCell,temp_exp_age_capacityCell,t_exp_age_capacityCell),UIGroup("Thermal",thermal_massCell)];
        Icon = 'module.svg';
    end

    for ParallelAssemblyIdx = 2:S
        equations
            vParallelAssembly(1) == vParallelAssembly(ParallelAssemblyIdx);
            socParallelAssembly(1) == socParallelAssembly(ParallelAssemblyIdx);
        end
    end
end